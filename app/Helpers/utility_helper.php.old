<?php
# Copyright Â© 2023 FirstWave. All Rights Reserved.
# SPDX-License-Identifier: AGPL-3.0-or-later
declare(strict_types=1);

$CI_INSTANCE = [];  # It keeps a ref to global CI instance

function register_ci_instance(\App\Controllers\BaseController &$_ci)
{
    global $CI_INSTANCE;
    $CI_INSTANCE[0] = &$_ci;
}


function &get_instance(): \App\Controllers\BaseController
{
    global $CI_INSTANCE;
    return $CI_INSTANCE[0];
}

function format_data($result, $type)
{
    if (empty($result)) {
        # TODO - throw an exception here
        return array();
    }
    if (gettype($result) == 'string') {
        # TODO - this ws being provided through Discovery some how.
        # Check this when we change from m_system to m_devices for processing results
        return array();
    }
    if (gettype($result) == 'object') {
        $object = $result;
        unset($result);
        $result = array($object);
        unset($object);
    }
    if (empty($type)) {
        return array();
    }
    $return = array();
    if (strpos($type, '/') !== false) {
        $temp = explode('/', $type);
        $link = $type;
        $type = $temp[count($temp)-1];
    } else {
        $link = $type;
    }
    foreach ($result as $entry) {
        $item = new \stdClass();
        $item->id = '';
        if (isset($entry->id) and $entry->id != '') {
            $item->id = intval($entry->id);
        } else if (!empty($entry->{'system.id'})) {
            $item->id = intval($entry->{'system.id'});
        } else if (!empty($entry->{$type.".id"})) {
            $item->id = intval($entry->{$type.".id"});
        } else if ($type == 'errors') {
            $item->id = $entry->code;
        }
        if ($type == 'widgets' and isset($entry->percent)) {
            $entry->percent = intval($entry->percent);
        }
        $item->type = $type;
        $item->attributes = $entry;
        $item->links = new \stdClass();
        $item->links->self = base_url() . '/index.php/' . $link . '/' . $item->id;
        $return[] = $item;
        unset($item);
    }
    return $return;
}

function ip_address_to_db($ip)
{
    if (($ip != "") and (!(is_null($ip))) and (substr_count($ip, '.') == 3)) {
        $myip = explode(".", $ip);
        $myip[0] = mb_substr("000".$myip[0], -3);
        $myip[1] = mb_substr("000".$myip[1], -3);
        $myip[2] = mb_substr("000".$myip[2], -3);
        $myip[3] = mb_substr("000".$myip[3], -3);
        $ip_post = $myip[0].".".$myip[1].".".$myip[2].".".$myip[3];
    } else {
        $ip_post = "";
    }

    return $ip_post;
}

function ip_address_from_db($ip)
{
    $ip_pre = $ip;
    if (($ip != "") and (!(is_null($ip)))) {
        $myip = explode(".", $ip);
        $myip[0] = ltrim($myip[0], "0");
        if ($myip[0] == "") {
            $myip[0] = "0";
        }
        if (isset($myip[1])) {
            $myip[1] = ltrim($myip[1], "0");
        }
        if (!isset($myip[1]) or $myip[1] == "") {
            $myip[1] = "0";
        }
        if (isset($myip[2])) {
            $myip[2] = ltrim($myip[2], "0");
        }
        if (!isset($myip[2]) or $myip[2] == "") {
            $myip[2] = "0";
        }
        if (isset($myip[3])) {
            $myip[3] = ltrim($myip[3], "0");
        }
        if (!isset($myip[3]) or $myip[3] == "") {
            $myip[3] = "0";
        }
        $ip = $myip[0].".".$myip[1].".".$myip[2].".".$myip[3];
    } else {
        $ip = "";
    }
    return $ip;
}

function run_sql($sql, $data = array())
{
    if (empty($sql)) {
        return array();
    }
    // clean our SQL (usually adding the running model, etc)
    $sql = str_replace(array("\r", "\r\n", "\n", "\t"), ' ', $sql);
    $sql = preg_replace('!\s+!', ' ', $sql);
    $sql = trim($sql);

    if (stripos($sql, 'insert into') === 0) {
        // this is an insert - return the insert_id
        $return = 'insert_id';
    } elseif (stripos($sql, 'update ') === 0) {
        $return = 'affected_rows';
    } elseif (stripos($sql, 'delete from ') === 0) {
        $return = 'affected_rows';
    } else {
        $return = 'result';
    }

    $result = array();

    // Set the DB driver to debug and connect
    // $custom = &config('Database')->default;
    // #echo "<pre>"; print_r($custom); exit;
    // $custom['DBDebug'] = true ;
    // $db = \Config\Database::connect($custom);
    $db = \Config\Database::connect();
    // run the query
    if (!empty($data)) {
        $query = $db->query($sql, $data);
    } else {
        $query = $db->query($sql);
    }
    // get the insert id or affected rows, etc
    if ($return === 'insert_id') {
        $result = $db->insertID();
    } elseif ($return === 'affected_rows') {
        $result = $db->affectedRows();
    } else {
        $result = $query->getResult();
    }

    // do we have an error?
    if ($db->error()['code'] !== 0) {
        # TODO - log this
        $code = $db->error()['code'];
        $message = $db->error()['message'];
        $result = array();
    }
    // return what we have
    return ($result);
}
